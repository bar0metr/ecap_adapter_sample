--- src/adapter_modifying.cc
+++ src/adapter_modifying.cc
@@ -1,77 +1,82 @@
 #include "sample.h"
+#include <cerrno>
+#include <cstring>
+#include <fstream>
 #include <iostream>
+#include <sstream>
 #include <libecap/common/registry.h>
 #include <libecap/common/errors.h>
 #include <libecap/common/message.h>
 #include <libecap/common/header.h>
 #include <libecap/common/names.h>
 #include <libecap/common/named_values.h>
 #include <libecap/host/host.h>
 #include <libecap/adapter/service.h>
 #include <libecap/adapter/xaction.h>
 #include <libecap/host/xaction.h>
 
 namespace Adapter { // not required, but adds clarity
 
 using libecap::size_type;
 
 class Service: public libecap::adapter::Service {
 	public:
 		// About
 		virtual std::string uri() const; // unique across all vendors
 		virtual std::string tag() const; // changes with version and config
 		virtual void describe(std::ostream &os) const; // free-format info
 
 		// Configuration
 		virtual void configure(const libecap::Options &cfg);
 		virtual void reconfigure(const libecap::Options &cfg);
 		void setOne(const libecap::Name &name, const libecap::Area &valArea);
 
 		// Lifecycle
 		virtual void start(); // expect makeXaction() calls
 		virtual void stop(); // no more makeXaction() calls until start()
 		virtual void retire(); // no more makeXaction() calls
 
 		// Scope (XXX: this may be changed to look at the whole header)
 		virtual bool wantsUrl(const char *url) const;
 
 		// Work
 		virtual MadeXactionPointer makeXaction(libecap::host::Xaction *hostx);
 
 	public:
 		// Configuration storage
 		std::string victim; // the text we want to replace
 		std::string replacement; // what the replace the victim with
 
 	protected:
 		void setVictim(const std::string &value);
+		const std::string loadReplacement(const std::string &fname);
 };
 
 
 // Calls Service::setOne() for each host-provided configuration option.
 // See Service::configure().
 class Cfgtor: public libecap::NamedValueVisitor {
 	public:
 		Cfgtor(Service &aSvc): svc(aSvc) {}
 		virtual void visit(const libecap::Name &name, const libecap::Area &value) {
 			svc.setOne(name, value);
 		}
 		Service &svc;
 };
 
 
 class Xaction: public libecap::adapter::Xaction {
 	public:
 		Xaction(libecap::shared_ptr<Service> s, libecap::host::Xaction *x);
 		virtual ~Xaction();
 
 		// meta-information for the host transaction
 		virtual const libecap::Area option(const libecap::Name &name) const;
 		virtual void visitEachOption(libecap::NamedValueVisitor &visitor) const;
 
 		// lifecycle
 		virtual void start();
 		virtual void stop();
 
 		// adapted body transmission control
 		virtual void abDiscard();
@@ -111,68 +116,87 @@ static const std::string CfgErrorPrefix =
 std::string Adapter::Service::uri() const {
 	return "ecap://e-cap.org/ecap/services/sample/modifying";
 }
 
 std::string Adapter::Service::tag() const {
 	return PACKAGE_VERSION;
 }
 
 void Adapter::Service::describe(std::ostream &os) const {
 	os << "A modifying adapter from " << PACKAGE_NAME << " v" << PACKAGE_VERSION;
 }
 
 void Adapter::Service::configure(const libecap::Options &cfg) {
 	Cfgtor cfgtor(*this);
 	cfg.visitEachOption(cfgtor);
 
 	// check for post-configuration errors and inconsistencies
 
 	if (victim.empty()) {
 		throw libecap::TextException(CfgErrorPrefix +
 			"victim value is not set");
 	}
 }
 
 void Adapter::Service::reconfigure(const libecap::Options &cfg) {
 	victim.clear();
 	replacement.clear();
 	configure(cfg);
 }
 
+const std::string Adapter::Service::loadReplacement(const std::string &fname) {
+	std::fstream input(fname.c_str(), std::ios_base::in);
+	if (!input) {
+		throw libecap::TextException(CfgErrorPrefix + "cannot open " +
+			"replacement-src file " + fname + " for reading: " + strerror(errno));
+	}
+
+	std::stringstream buf;
+	buf << input.rdbuf(); // possibly slow but definitely simple
+	if (input.bad()) {
+		throw libecap::TextException(CfgErrorPrefix + "cannot read " + 
+			"replacement-src file " + fname + ": " + strerror(errno));
+	}
+	return buf.str(); // may be empty
+}
+
 void Adapter::Service::setOne(const libecap::Name &name, const libecap::Area &valArea) {
 	const std::string value = valArea.toString();
 	if (name == "victim")
 		setVictim(value);
 	else
 	if (name == "replacement")
 		replacement = value; // no checks needed, even an empty value is OK
 	else
+	if (name == "replacement-src")
+		replacement = loadReplacement(value);
+	else
 	if (name.assignedHostId())
 		; // skip host-standard options we do not know or care about
 	else
 		throw libecap::TextException(CfgErrorPrefix +
 			"unsupported configuration parameter: " + name.image());
 }
 
 void Adapter::Service::setVictim(const std::string &value) {
 	if (value.empty()) {
 		throw libecap::TextException(CfgErrorPrefix +
 			"empty victim value is not allowed");
 	}
 	victim = value;
 }
 
 void Adapter::Service::start() {
 	libecap::adapter::Service::start();
 	// custom code would go here, but this service does not have one
 }
 
 void Adapter::Service::stop() {
 	// custom code would go here, but this service does not have one
 	libecap::adapter::Service::stop();
 }
 
 void Adapter::Service::retire() {
 	// custom code would go here, but this service does not have one
 	libecap::adapter::Service::stop();
 }
